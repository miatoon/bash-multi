#!/bin/bash
VERSION="1.2.2"

# Execute this script with 'bash -x SCRIPT' to activate debugging
if [ ${-/*x*/x} == 'x' ]; then
    PS4='+ ${BASH_SOURCE[0]}:${LINENO} ${FUNCNAME[0]}() |err=$?| \$ '
fi
set -e  # Fail on first error

SELF_NAME="$0"
SELF_NAME="${SELF_NAME#\.}"
SELF_NAME="${SELF_NAME##/*/}"
SELF_NAME="${SELF_NAME#/}"
SELF_NAME="${SELF_NAME%.sh}"
SELF_DIRNAME=$(cd "$(dirname $(type -p "$0"))" ; pwd)

# Includes
source "${SELF_DIRNAME}/colors.inc"

function _version()
{
    echo "${SELF_NAME} v${VERSION}"
}

function _help()
{
    cat <<EOF
Execute a COMMAND in each FOLDERs.

Usage:
    ${SELF_NAME} FOLDER [FOLDER ...] -- COMMAND


OPTIONS:
    -v, --version   Display version.
    -h, --help      Display this help.
    -p, --parallel  Use of GNU parallel

    --              Mandatory. Separate the FOLDERs from the COMMAND.

EXAMPLES:
    ${SELF_NAME} repo*/ -- git status | grep -E '^On branch'
    ${SELF_NAME} repo*/ -- git fetch --all --tags \; git pull
    ${SELF_NAME} -p repo*/ -- git status \| grep -E \'^On branch\'
    ${SELF_NAME} -p repo*/ -- git fetch --all --tags \; git pull
EOF
}

function _main()
{
    FOLDERS=()
    local folder_sep_found=0

    args=$(getopt --options hvp --longoptions help,version,parallel --name "${SELF_NAME}" -- "$@")
    if [ $? -ne 0 ]; then
        >&2 echo_color "Error: Invalid options" $COLOR_RED
        exit 2
    fi

    USE_PARALLEL=0
    while [ $# -gt 0 ]; do
        case "$1" in
        -v|--version)
            _version
            exit 0
        ;;
        -h|--help)
            _help
            exit 0
        ;;
        -p|--parallel)
            USE_PARALLEL=1
            shift
        ;;
        --)
            folder_sep_found=1
            shift
            break
        ;;
        *)
            FOLDERS+=("$1")
            shift
        ;;
        esac
    done

    COMMAND=( "$@" )
    # declare -p FOLDERS # DEBUG
    # declare -p COMMAND # DEBUG

    #
    # Manage mandatory options
    #
    # '--' should be used and at least one folder should be given.
    if [ $folder_sep_found -eq 0 ]; then
        >&2 echo_color "Error: You have to separate FOLDERs and COMMAND by using ' -- '" $COLOR_RED
        exit 2
    elif [ ${#FOLDERS[@]} -eq 0 ]; then
        >&2 echo_color "Error: You have to specify at least one FOLDER" $COLOR_RED
        exit 2
    fi

    #
    # Manage existence of given folders
    #
    local folder
    for folder in "${FOLDERS[@]}"; do
        if [ ! -e "${folder}" ]; then
            >&2 echo_color "Error: '${folder}' was not found" $COLOR_RED
            exit 2
        elif [ ! -d "${folder}" ]; then
            >&2 echo_color "Error: '${folder}' is not a folder" $COLOR_RED
            exit 2
        fi
    done

    #
    # Manage existence of external products
    #
    if [[ $USE_PARALLEL == 1 ]]; then
        which parallel >& /dev/null
        local errcode=$?
        if [[ $errcode != 0 ]]; then
            >&2 echo_color 'Error: Unable to reach GNU parallel.' $COLOR_RED
            >&2 echo_color '       Did you install it? Is it present in your PATH env variable?' $COLOR_RED
            exit 2
        fi
    fi

    execute_command
}

function execute_command()
{
    if [[ $USE_PARALLEL == 1 ]]; then
        _execute_command_using_parallel
    else
        _execute_command_simply
    fi
}

function _execute_command_simply()
{
    local sep_char='*'
    local sep_line_length=78

    local folder
    local sep_line

    for (( i=0 ; $i < ${#FOLDERS[@]} ; i++ )); do
        local folder="${FOLDERS[$i]}"
        local header="[$((i+1))] ${folder} "

        length=$(( ${sep_line_length} - ${#header} ))
        printf -v sep_line "%${length}s"    # |sep_line| now contains only spaces.
        sep_line=${sep_line// /${sep_char}} # Replace all spaces in |sep_line| with character |sep_char|

        >&2 echo ""
        >&2 echo_color "${header}${sep_line}" $COLOR_CYAN # Display a nice delimiter line, beginning with the folder name.
        (
            cd "${folder}"
            # "${COMMAND[@]}" # WORKS but no color, only 1 command, no piped commands
            bash -c "${COMMAND[*]}" # WORKS with color, with multiple commands, with piped commands, but be careful with commands containing whitespaces
        )
    done
}

function _execute_command_using_parallel()
{
    local sep_char='*'
    local sep_line_length=78

    parallel --keep-order "header='[{#}] {} '" \; echo -e '\\e['$COLOR_CYAN'm' \; echo -n '${header}' \; printf "%.0s${sep_char}" '$( seq 1 $(('${sep_line_length}'-${#header})) )' \; echo -e '\\e['$STYLE_NORMAL'm' \; cd "{}" \; "${COMMAND[@]}" ::: "${FOLDERS[@]}"
}

_main "$@"
